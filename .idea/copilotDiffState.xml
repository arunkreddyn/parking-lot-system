<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/parking/DataLoader.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/parking/DataLoader.java" />
              <option name="originalContent" value="package com.example.parking;&#10;&#10;import com.example.parking.model.*;&#10;import com.example.parking.repository.*;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.boot.CommandLineRunner;&#10;import org.springframework.stereotype.Component;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Component&#10;@RequiredArgsConstructor&#10;public class DataLoader implements CommandLineRunner {&#10;&#10;    private final ParkingLotRepository lotRepo;&#10;    private final ParkingSlotRepository slotRepo;&#10;    private final VehicleRepository vehicleRepo;&#10;    private final TicketRepository ticketRepo;&#10;    private final PaymentRepository paymentRepo;&#10;&#10;    @Override&#10;    @Transactional&#10;    public void run(String... args) {&#10;        // 1. Create a Parking Lot&#10;        ParkingLot lot = lotRepo.save(&#10;                ParkingLot.builder()&#10;                        .location(&quot;Arun Plaza&quot;)&#10;                        .floors(3)&#10;                        .build()&#10;        );&#10;&#10;        // 2. Add slots for each floor&#10;        for (int f = 1; f &lt;= 3; f++) {&#10;            for (int i = 0; i &lt; 5; i++) {&#10;                slotRepo.save(ParkingSlot.builder().floor(f).type(SlotType.CAR).status(SlotStatus.FREE).build());&#10;            }&#10;            for (int i = 0; i &lt; 3; i++) {&#10;                slotRepo.save(ParkingSlot.builder().floor(f).type(SlotType.BIKE).status(SlotStatus.FREE).build());&#10;            }&#10;            for (int i = 0; i &lt; 2; i++) {&#10;                slotRepo.save(ParkingSlot.builder().floor(f).type(SlotType.TRUCK).status(SlotStatus.FREE).build());&#10;            }&#10;        }&#10;&#10;        // 3. Create sample vehicles&#10;        Vehicle car = vehicleRepo.save(&#10;                Vehicle.builder()&#10;                        .plateNo(&quot;MH12AB1234&quot;)&#10;                        .type(SlotType.CAR)&#10;                        .ownerEmail(&quot;user1@example.com&quot;)&#10;                        .build()&#10;        );&#10;&#10;        Vehicle bike = vehicleRepo.save(&#10;                Vehicle.builder()&#10;                        .plateNo(&quot;MH14XY5678&quot;)&#10;                        .type(SlotType.BIKE)&#10;                        .ownerEmail(&quot;user2@example.com&quot;)&#10;                        .build()&#10;        );&#10;&#10;        // 4. Assign one active ticket (car parked now)&#10;        ParkingSlot freeCarSlot = slotRepo.findAndLockFirstFreeSlotByType(SlotType.CAR).get(0);&#10;        freeCarSlot.setStatus(SlotStatus.OCCUPIED);&#10;        slotRepo.save(freeCarSlot);&#10;&#10;        Ticket activeTicket = ticketRepo.save(&#10;                Ticket.builder()&#10;                        .vehicle(car)&#10;                        .slot(freeCarSlot)&#10;                        .entryTime(LocalDateTime.now().minusMinutes(90)) // 1.5 hours ago&#10;                        .status(TicketStatus.ACTIVE)&#10;                        .build()&#10;        );&#10;&#10;        // 5. Create one exited ticket + payment (bike example)&#10;        ParkingSlot bikeSlot = slotRepo.findAndLockFirstFreeSlotByType(SlotType.BIKE).get(0);&#10;        bikeSlot.setStatus(SlotStatus.FREE);&#10;        slotRepo.save(bikeSlot);&#10;&#10;        Ticket exitedTicket = ticketRepo.save(&#10;                Ticket.builder()&#10;                        .vehicle(bike)&#10;                        .slot(bikeSlot)&#10;                        .entryTime(LocalDateTime.now().minusHours(4))&#10;                        .exitTime(LocalDateTime.now().minusHours(1))&#10;                        .status(TicketStatus.EXITED)&#10;                        .build()&#10;        );&#10;&#10;        paymentRepo.save(&#10;                Payment.builder()&#10;                        .ticket(exitedTicket)&#10;                        .amount(30.0)&#10;                        .status(PaymentStatus.SUCCESS)&#10;                        .timestamp(LocalDateTime.now().minusHours(1))&#10;                        .build()&#10;        );&#10;&#10;        System.out.println(&quot;✅ Demo data loaded: ParkingLot, slots, vehicles, tickets, payments.&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.aaru.parking;&#10;&#10;import com.example.parking.model.*;&#10;import com.example.parking.repository.*;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.boot.CommandLineRunner;&#10;import org.springframework.stereotype.Component;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Component&#10;@RequiredArgsConstructor&#10;public class DataLoader implements CommandLineRunner {&#10;&#10;    private final ParkingLotRepository lotRepo;&#10;    private final ParkingSlotRepository slotRepo;&#10;    private final VehicleRepository vehicleRepo;&#10;    private final TicketRepository ticketRepo;&#10;    private final PaymentRepository paymentRepo;&#10;&#10;    @Override&#10;    @Transactional&#10;    public void run(String... args) {&#10;        // 1. Create a Parking Lot&#10;        ParkingLot lot = lotRepo.save(&#10;                ParkingLot.builder()&#10;                        .location(&quot;Arun Plaza&quot;)&#10;                        .floors(3)&#10;                        .build()&#10;        );&#10;&#10;        // 2. Add slots for each floor&#10;        for (int f = 1; f &lt;= 3; f++) {&#10;            for (int i = 0; i &lt; 5; i++) {&#10;                slotRepo.save(ParkingSlot.builder().floor(f).type(SlotType.CAR).status(SlotStatus.FREE).build());&#10;            }&#10;            for (int i = 0; i &lt; 3; i++) {&#10;                slotRepo.save(ParkingSlot.builder().floor(f).type(SlotType.BIKE).status(SlotStatus.FREE).build());&#10;            }&#10;            for (int i = 0; i &lt; 2; i++) {&#10;                slotRepo.save(ParkingSlot.builder().floor(f).type(SlotType.TRUCK).status(SlotStatus.FREE).build());&#10;            }&#10;        }&#10;&#10;        // 3. Create sample vehicles&#10;        Vehicle car = vehicleRepo.save(&#10;                Vehicle.builder()&#10;                        .plateNo(&quot;MH12AB1234&quot;)&#10;                        .type(SlotType.CAR)&#10;                        .ownerEmail(&quot;user1@example.com&quot;)&#10;                        .build()&#10;        );&#10;&#10;        Vehicle bike = vehicleRepo.save(&#10;                Vehicle.builder()&#10;                        .plateNo(&quot;MH14XY5678&quot;)&#10;                        .type(SlotType.BIKE)&#10;                        .ownerEmail(&quot;user2@example.com&quot;)&#10;                        .build()&#10;        );&#10;&#10;        // 4. Assign one active ticket (car parked now)&#10;        ParkingSlot freeCarSlot = slotRepo.findAndLockFirstFreeSlotByType(SlotType.CAR).get(0);&#10;        freeCarSlot.setStatus(SlotStatus.OCCUPIED);&#10;        slotRepo.save(freeCarSlot);&#10;&#10;        Ticket activeTicket = ticketRepo.save(&#10;                Ticket.builder()&#10;                        .vehicle(car)&#10;                        .slot(freeCarSlot)&#10;                        .entryTime(LocalDateTime.now().minusMinutes(90)) // 1.5 hours ago&#10;                        .status(TicketStatus.ACTIVE)&#10;                        .build()&#10;        );&#10;&#10;        // 5. Create one exited ticket + payment (bike example)&#10;        ParkingSlot bikeSlot = slotRepo.findAndLockFirstFreeSlotByType(SlotType.BIKE).get(0);&#10;        bikeSlot.setStatus(SlotStatus.FREE);&#10;        slotRepo.save(bikeSlot);&#10;&#10;        Ticket exitedTicket = ticketRepo.save(&#10;                Ticket.builder()&#10;                        .vehicle(bike)&#10;                        .slot(bikeSlot)&#10;                        .entryTime(LocalDateTime.now().minusHours(4))&#10;                        .exitTime(LocalDateTime.now().minusHours(1))&#10;                        .status(TicketStatus.EXITED)&#10;                        .build()&#10;        );&#10;&#10;        paymentRepo.save(&#10;                Payment.builder()&#10;                        .ticket(exitedTicket)&#10;                        .amount(30.0)&#10;                        .status(PaymentStatus.SUCCESS)&#10;                        .timestamp(LocalDateTime.now().minusHours(1))&#10;                        .build()&#10;        );&#10;&#10;        System.out.println(&quot;✅ Demo data loaded: ParkingLot, slots, vehicles, tickets, payments.&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/parking/ParkingLotSystemApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/parking/ParkingLotSystemApplication.java" />
              <option name="originalContent" value="package com.example.parking;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class ParkingLotSystemApplication {&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(ParkingLotSystemApplication.class, args);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.aaru.parking;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class ParkingLotSystemApplication {&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(ParkingLotSystemApplication.class, args);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/parking/config/SecurityConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/parking/config/SecurityConfig.java" />
              <option name="originalContent" value="package com.example.parking.config;&#10;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.core.authority.SimpleGrantedAuthority;&#10;import org.springframework.security.oauth2.client.userinfo.*;&#10;import org.springframework.security.oauth2.core.user.*;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.security.web.util.matcher.AntPathRequestMatcher;&#10;&#10;import java.util.*;&#10;&#10;@Configuration&#10;@EnableWebSecurity&#10;public class SecurityConfig {&#10;&#10;    @Value(&quot;${app.admin.emails:}&quot;)&#10;    private String adminEmails;&#10;&#10;    @Bean&#10;    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {&#10;        http&#10;                .authorizeHttpRequests(authorize -&gt; authorize&#10;                        // Explicitly allow H2-Console using AntPathRequestMatcher&#10;                        .requestMatchers(AntPathRequestMatcher.antMatcher(&quot;/h2-console/**&quot;)).permitAll()&#10;                        // Other public endpoints can also use AntPathRequestMatcher&#10;                        .requestMatchers(AntPathRequestMatcher.antMatcher(&quot;/api/auth/login&quot;)).permitAll()&#10;&#10;                        .requestMatchers(AntPathRequestMatcher.antMatcher(&quot;/api/admin/**&quot;)).hasRole(&quot;ADMIN&quot;)&#10;                        .requestMatchers(AntPathRequestMatcher.antMatcher(&quot;/api/**&quot;)).hasAnyRole(&quot;USER&quot;, &quot;ADMIN&quot;)&#10;                        .anyRequest().authenticated()&#10;                )&#10;                .oauth2Login(oauth2 -&gt; oauth2.defaultSuccessUrl(&quot;/&quot;, true))&#10;                .csrf(csrf -&gt; csrf.disable())&#10;                .headers(headers -&gt; headers.frameOptions(frameOptions -&gt; frameOptions.sameOrigin()));&#10;&#10;        return http.build();&#10;    }&#10;&#10;&#10;    private OAuth2UserService&lt;OAuth2UserRequest, OAuth2User&gt; oauth2UserService() {&#10;        DefaultOAuth2UserService delegate = new DefaultOAuth2UserService();&#10;        return request -&gt; {&#10;            OAuth2User oauth2User = delegate.loadUser(request);&#10;            String email = (String) oauth2User.getAttributes().get(&quot;email&quot;);&#10;            Set&lt;SimpleGrantedAuthority&gt; authorities = new HashSet&lt;&gt;();&#10;            authorities.add(new SimpleGrantedAuthority(&quot;ROLE_USER&quot;));&#10;            if (isAdmin(email)) {&#10;                authorities.add(new SimpleGrantedAuthority(&quot;ROLE_ADMIN&quot;));&#10;            }&#10;            Map&lt;String, Object&gt; attrs = new HashMap&lt;&gt;(oauth2User.getAttributes());&#10;            String nameKey = attrs.containsKey(&quot;sub&quot;) ? &quot;sub&quot; : &quot;email&quot;;&#10;            return new DefaultOAuth2User(authorities, attrs, nameKey);&#10;        };&#10;    }&#10;&#10;    private boolean isAdmin(String email) {&#10;        if (email == null || adminEmails.isBlank()) return false;&#10;        List&lt;String&gt; admins = Arrays.stream(adminEmails.split(&quot;,&quot;)).map(String::trim).toList();&#10;        return admins.contains(email);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.aaru.parking.config;&#10;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.core.authority.SimpleGrantedAuthority;&#10;import org.springframework.security.oauth2.client.userinfo.*;&#10;import org.springframework.security.oauth2.core.user.*;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.security.web.util.matcher.AntPathRequestMatcher;&#10;&#10;import java.util.*;&#10;&#10;@Configuration&#10;@EnableWebSecurity&#10;public class SecurityConfig {&#10;&#10;    @Value(&quot;${app.admin.emails:}&quot;)&#10;    private String adminEmails;&#10;&#10;    @Bean&#10;    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {&#10;        http&#10;                .authorizeHttpRequests(authorize -&gt; authorize&#10;                        // Explicitly allow H2-Console using AntPathRequestMatcher&#10;                        .requestMatchers(AntPathRequestMatcher.antMatcher(&quot;/h2-console/**&quot;)).permitAll()&#10;                        // Other public endpoints can also use AntPathRequestMatcher&#10;                        .requestMatchers(AntPathRequestMatcher.antMatcher(&quot;/api/auth/login&quot;)).permitAll()&#10;&#10;                        .requestMatchers(AntPathRequestMatcher.antMatcher(&quot;/api/admin/**&quot;)).hasRole(&quot;ADMIN&quot;)&#10;                        .requestMatchers(AntPathRequestMatcher.antMatcher(&quot;/api/**&quot;)).hasAnyRole(&quot;USER&quot;, &quot;ADMIN&quot;)&#10;                        .anyRequest().authenticated()&#10;                )&#10;                .oauth2Login(oauth2 -&gt; oauth2.defaultSuccessUrl(&quot;/&quot;, true))&#10;                .csrf(csrf -&gt; csrf.disable())&#10;                .headers(headers -&gt; headers.frameOptions(frameOptions -&gt; frameOptions.sameOrigin()));&#10;&#10;        return http.build();&#10;    }&#10;&#10;&#10;    private OAuth2UserService&lt;OAuth2UserRequest, OAuth2User&gt; oauth2UserService() {&#10;        DefaultOAuth2UserService delegate = new DefaultOAuth2UserService();&#10;        return request -&gt; {&#10;            OAuth2User oauth2User = delegate.loadUser(request);&#10;            String email = (String) oauth2User.getAttributes().get(&quot;email&quot;);&#10;            Set&lt;SimpleGrantedAuthority&gt; authorities = new HashSet&lt;&gt;();&#10;            authorities.add(new SimpleGrantedAuthority(&quot;ROLE_USER&quot;));&#10;            if (isAdmin(email)) {&#10;                authorities.add(new SimpleGrantedAuthority(&quot;ROLE_ADMIN&quot;));&#10;            }&#10;            Map&lt;String, Object&gt; attrs = new HashMap&lt;&gt;(oauth2User.getAttributes());&#10;            String nameKey = attrs.containsKey(&quot;sub&quot;) ? &quot;sub&quot; : &quot;email&quot;;&#10;            return new DefaultOAuth2User(authorities, attrs, nameKey);&#10;        };&#10;    }&#10;&#10;    private boolean isAdmin(String email) {&#10;        if (email == null || adminEmails.isBlank()) return false;&#10;        List&lt;String&gt; admins = Arrays.stream(adminEmails.split(&quot;,&quot;)).map(String::trim).toList();&#10;        return admins.contains(email);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/parking/controller/AdminController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/parking/controller/AdminController.java" />
              <option name="originalContent" value="package com.example.parking.controller;&#10;&#10;import com.example.parking.model.*;&#10;import com.example.parking.repository.ParkingSlotRepository;&#10;import jakarta.persistence.Access;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.access.prepost.PreAuthorize;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/admin&quot;)&#10;@RequiredArgsConstructor&#10;@PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;public class AdminController {&#10;&#10;    private final ParkingSlotRepository slotRepo;&#10;&#10;    @PostMapping(&quot;/lots&quot;)&#10;    public ParkingLot addLot(@RequestBody ParkingLot lot) {&#10;        return service.addParkingLot(lot);&#10;    }&#10;&#10;    @PostMapping(&quot;/lots/{lotId}/slots&quot;)&#10;    public ResponseEntity&lt;?&gt; addSlot(@PathVariable Long lotId,@RequestBody AddSlotRequest req) {&#10;        ParkingSlot slot = ParkingSlot.builder().floor(req.getFloor()).type(req.getType()).status(SlotStatus.FREE).build();&#10;        slotRepo.save(slot);&#10;        return ResponseEntity.ok(slot);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/slots/{id}&quot;)&#10;    public ResponseEntity&lt;?&gt; removeSlot(@PathVariable Long id) {&#10;        slotRepo.deleteById(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.aaru.parking.controller;&#10;&#10;import com.aaru.parking.model.*;&#10;import com.aaru.parking.repository.ParkingSlotRepository;&#10;import jakarta.persistence.Access;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.access.prepost.PreAuthorize;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/admin&quot;)&#10;@RequiredArgsConstructor&#10;@PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;public class AdminController {&#10;&#10;    private final ParkingSlotRepository slotRepo;&#10;&#10;    @PostMapping(&quot;/lots&quot;)&#10;    public ParkingLot addLot(@RequestBody ParkingLot lot) {&#10;        return service.addParkingLot(lot);&#10;    }&#10;&#10;    @PostMapping(&quot;/lots/{lotId}/slots&quot;)&#10;    public ResponseEntity&lt;?&gt; addSlot(@PathVariable Long lotId,@RequestBody AddSlotRequest req) {&#10;        ParkingSlot slot = ParkingSlot.builder().floor(req.getFloor()).type(req.getType()).status(SlotStatus.FREE).build();&#10;        slotRepo.save(slot);&#10;        return ResponseEntity.ok(slot);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/slots/{id}&quot;)&#10;    public ResponseEntity&lt;?&gt; removeSlot(@PathVariable Long id) {&#10;        slotRepo.deleteById(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/parking/controller/ParkingController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/parking/controller/ParkingController.java" />
              <option name="originalContent" value="package com.example.parking.controller;&#10;&#10;import com.example.parking.model.*;&#10;import com.example.parking.service.ParkingService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import jakarta.validation.Valid;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.NotNull;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api&quot;)&#10;@RequiredArgsConstructor&#10;public class ParkingController {&#10;&#10;    private final ParkingService parkingService;&#10;&#10;    @PostMapping(&quot;/entry&quot;)&#10;    public ResponseEntity&lt;?&gt; entry(@Valid @RequestBody EntryRequest req) {&#10;        Ticket ticket = parkingService.handleEntry(req.getPlateNo(), req.getType(), req.getOwnerEmail());&#10;        return ResponseEntity.ok(ticket);&#10;    }&#10;&#10;    @PostMapping(&quot;/exit/{ticketId}&quot;)&#10;    public ResponseEntity&lt;?&gt; exit(@PathVariable Long ticketId) {&#10;        Payment payment = parkingService.handleExit(ticketId);&#10;        return ResponseEntity.ok(payment);&#10;    }&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.aaru.parking.controller;&#10;&#10;import com.aaru.parking.model.*;&#10;import com.aaru.parking.service.ParkingService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import jakarta.validation.Valid;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.NotNull;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api&quot;)&#10;@RequiredArgsConstructor&#10;public class ParkingController {&#10;&#10;    private final ParkingService parkingService;&#10;&#10;    @PostMapping(&quot;/entry&quot;)&#10;    public ResponseEntity&lt;?&gt; entry(@Valid @RequestBody EntryRequest req) {&#10;        Ticket ticket = parkingService.handleEntry(req.getPlateNo(), req.getType(), req.getOwnerEmail());&#10;        return ResponseEntity.ok(ticket);&#10;    }&#10;&#10;    @PostMapping(&quot;/exit/{ticketId}&quot;)&#10;    public ResponseEntity&lt;?&gt; exit(@PathVariable Long ticketId) {&#10;        Payment payment = parkingService.handleExit(ticketId);&#10;        return ResponseEntity.ok(payment);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/parking/model/AddSlotRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/parking/model/AddSlotRequest.java" />
              <option name="originalContent" value="package com.example.parking.model;&#10;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;&#10;@Setter&#10;@Getter&#10;public class AddSlotRequest {&#10;    private SlotType type;&#10;    private Integer floor;&#10;&#10;}" />
              <option name="updatedContent" value="package com.aaru.parking.model;&#10;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;&#10;@Setter&#10;@Getter&#10;public class AddSlotRequest {&#10;    private SlotType type;&#10;    private Integer floor;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/parking/model/ParkingLot.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/parking/model/ParkingLot.java" />
              <option name="originalContent" value="package com.example.parking.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;&#10;@Entity&#10;@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder&#10;public class ParkingLot {&#10;    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;    private String location;&#10;    private Integer floors;&#10;}&#10;" />
              <option name="updatedContent" value="package com.aaru.parking.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;&#10;@Entity&#10;@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder&#10;public class ParkingLot {&#10;    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;    private String location;&#10;    private Integer floors;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/parking/model/ParkingSlot.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/parking/model/ParkingSlot.java" />
              <option name="originalContent" value="package com.example.parking.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;&#10;import java.util.Objects;&#10;&#10;@Entity&#10;@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder&#10;public class ParkingSlot {&#10;    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    private SlotType type;&#10;&#10;    private Integer floor;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    private SlotStatus status;&#10;&#10;    // java&#10;    @Override&#10;    public boolean equals(Object o) {&#10;        if (this == o) return true;&#10;        if (o == null || getClass() != o.getClass()) return false;&#10;        ParkingSlot that = (ParkingSlot) o;&#10;        return Objects.equals(id, that.id) &amp;&amp;&#10;               type == that.type &amp;&amp;&#10;               Objects.equals(floor, that.floor) &amp;&amp;&#10;               status == that.status;&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return Objects.hash(id, type, floor, status);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.aaru.parking.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;&#10;import java.util.Objects;&#10;&#10;@Entity&#10;@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder&#10;public class ParkingSlot {&#10;    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    private SlotType type;&#10;&#10;    private Integer floor;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    private SlotStatus status;&#10;&#10;    // java&#10;    @Override&#10;    public boolean equals(Object o) {&#10;        if (this == o) return true;&#10;        if (o == null || getClass() != o.getClass()) return false;&#10;        ParkingSlot that = (ParkingSlot) o;&#10;        return Objects.equals(id, that.id) &amp;&amp;&#10;               type == that.type &amp;&amp;&#10;               Objects.equals(floor, that.floor) &amp;&amp;&#10;               status == that.status;&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return Objects.hash(id, type, floor, status);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/parking/model/Payment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/parking/model/Payment.java" />
              <option name="originalContent" value="package com.example.parking.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class Payment {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @OneToOne(optional = false)&#10;    private Ticket ticket;&#10;&#10;    private Double amount;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    private PaymentStatus status;&#10;&#10;    private LocalDateTime timestamp;&#10;}&#10;" />
              <option name="updatedContent" value="package com.aaru.parking.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class Payment {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @OneToOne(optional = false)&#10;    private Ticket ticket;&#10;&#10;    private Double amount;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    private PaymentStatus status;&#10;&#10;    private LocalDateTime timestamp;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/parking/model/SlotStatus.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/parking/model/SlotStatus.java" />
              <option name="originalContent" value="package com.example.parking.model;&#10;&#10;public enum SlotStatus {&#10;    FREE, OCCUPIED, RESERVED&#10;}&#10;" />
              <option name="updatedContent" value="package com.aaru.parking.model;&#10;&#10;public enum SlotStatus {&#10;    FREE, OCCUPIED, RESERVED&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/parking/model/SlotType.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/parking/model/SlotType.java" />
              <option name="originalContent" value="package com.example.parking.model;&#10;&#10;public enum SlotType {&#10;    BIKE, CAR, TRUCK&#10;}&#10;" />
              <option name="updatedContent" value="package com.aaru.parking.model;&#10;&#10;public enum SlotType {&#10;    BIKE, CAR, TRUCK&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/parking/model/Ticket.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/parking/model/Ticket.java" />
              <option name="originalContent" value="package com.example.parking.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class Ticket {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @ManyToOne(optional = false)&#10;    private Vehicle vehicle;&#10;&#10;    @ManyToOne(optional = false)&#10;    private ParkingSlot slot;&#10;&#10;    private LocalDateTime entryTime;&#10;    private LocalDateTime exitTime;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    private TicketStatus status;&#10;}&#10;" />
              <option name="updatedContent" value="package com.aaru.parking.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class Ticket {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @ManyToOne(optional = false)&#10;    private Vehicle vehicle;&#10;&#10;    @ManyToOne(optional = false)&#10;    private ParkingSlot slot;&#10;&#10;    private LocalDateTime entryTime;&#10;    private LocalDateTime exitTime;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    private TicketStatus status;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/parking/repository/ParkingLotRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/parking/repository/ParkingLotRepository.java" />
              <option name="originalContent" value="package com.example.parking.repository;&#10;&#10;import com.example.parking.model.ParkingLot;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;@Repository&#10;public interface ParkingLotRepository extends JpaRepository&lt;ParkingLot, Long&gt; {&#10;}" />
              <option name="updatedContent" value="package com.aaru.parking.repository;&#10;&#10;import com.example.parking.model.ParkingLot;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;@Repository&#10;public interface ParkingLotRepository extends JpaRepository&lt;ParkingLot, Long&gt; {&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/parking/repository/ParkingSlotRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/parking/repository/ParkingSlotRepository.java" />
              <option name="originalContent" value="package com.example.parking.repository;&#10;&#10;import com.example.parking.model.*;&#10;import org.springframework.data.jpa.repository.*;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import jakarta.persistence.LockModeType;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface ParkingSlotRepository extends JpaRepository&lt;ParkingSlot, Long&gt; {&#10;&#10;    @Lock(LockModeType.PESSIMISTIC_WRITE)&#10;    @Query(&quot;&quot;&quot;&#10;        select s from ParkingSlot s&#10;        where s.type = :type and s.status = 'FREE'&#10;        order by s.floor asc, s.id asc&#10;    &quot;&quot;&quot;)&#10;    List&lt;ParkingSlot&gt; findAndLockFirstFreeSlotByType(@Param(&quot;type&quot;) SlotType type);&#10;&#10;    List&lt;ParkingSlot&gt; findByStatus(SlotStatus status);&#10;}&#10;" />
              <option name="updatedContent" value="package com.aaru.parking.repository;&#10;&#10;import com.example.parking.model.*;&#10;import org.springframework.data.jpa.repository.*;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import jakarta.persistence.LockModeType;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface ParkingSlotRepository extends JpaRepository&lt;ParkingSlot, Long&gt; {&#10;&#10;    @Lock(LockModeType.PESSIMISTIC_WRITE)&#10;    @Query(&quot;&quot;&quot;&#10;        select s from ParkingSlot s&#10;        where s.type = :type and s.status = 'FREE'&#10;        order by s.floor asc, s.id asc&#10;    &quot;&quot;&quot;)&#10;    List&lt;ParkingSlot&gt; findAndLockFirstFreeSlotByType(@Param(&quot;type&quot;) SlotType type);&#10;&#10;    List&lt;ParkingSlot&gt; findByStatus(SlotStatus status);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/parking/repository/PaymentRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/parking/repository/PaymentRepository.java" />
              <option name="originalContent" value="package com.example.parking.repository;&#10;&#10;import com.example.parking.model.Payment;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;@Repository&#10;public interface PaymentRepository extends JpaRepository&lt;Payment, Long&gt; {&#10;}&#10;" />
              <option name="updatedContent" value="package com.aaru.parking.repository;&#10;&#10;import com.example.parking.model.Payment;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;@Repository&#10;public interface PaymentRepository extends JpaRepository&lt;Payment, Long&gt; {&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/parking/repository/VehicleRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/parking/repository/VehicleRepository.java" />
              <option name="originalContent" value="package com.example.parking.repository;&#10;&#10;import com.example.parking.model.Vehicle;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.Optional;&#10;&#10;@Repository&#10;public interface VehicleRepository extends JpaRepository&lt;Vehicle, Long&gt; {&#10;    Optional&lt;Vehicle&gt; findByPlateNo(String plateNo);&#10;}&#10;" />
              <option name="updatedContent" value="package com.aaru.parking.repository;&#10;&#10;import com.example.parking.model.Vehicle;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.Optional;&#10;&#10;@Repository&#10;public interface VehicleRepository extends JpaRepository&lt;Vehicle, Long&gt; {&#10;    Optional&lt;Vehicle&gt; findByPlateNo(String plateNo);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/parking/service/PricingService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/parking/service/PricingService.java" />
              <option name="originalContent" value="package com.example.parking.service;&#10;&#10;import com.example.parking.model.SlotType;&#10;&#10;public interface PricingService {&#10;    double calculateAmount(SlotType type, long minutes);&#10;}&#10;" />
              <option name="updatedContent" value="package com.aaru.parking.service;&#10;&#10;import com.aaru.parking.model.SlotType;&#10;&#10;public interface PricingService {&#10;    double calculateAmount(SlotType type, long minutes);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/parking/service/impl/ParkingServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/parking/service/impl/ParkingServiceImpl.java" />
              <option name="originalContent" value="package com.example.parking.service.impl;&#10;&#10;import com.example.parking.model.*;&#10;import com.example.parking.repository.*;&#10;import com.example.parking.service.ParkingService;&#10;import com.example.parking.service.PricingService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.time.Duration;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class ParkingServiceImpl implements ParkingService {&#10;&#10;    private final ParkingSlotRepository slotRepo;&#10;    private final VehicleRepository vehicleRepo;&#10;    private final TicketRepository ticketRepo;&#10;    private final PaymentRepository paymentRepo;&#10;    private final PricingService pricingService;&#10;&#10;    @Override&#10;    @Transactional&#10;    public Ticket handleEntry(String plateNo, SlotType type, String ownerEmail) {&#10;        Optional&lt;Ticket&gt; existing = ticketRepo.findByVehicle_PlateNoAndStatus(plateNo, TicketStatus.ACTIVE);&#10;        if (existing.isPresent()) {&#10;            throw new IllegalStateException(&quot;Vehicle already parked (active ticket exists)&quot;);&#10;        }&#10;&#10;        Vehicle vehicle = vehicleRepo.findByPlateNo(plateNo)&#10;                .orElseGet(() -&gt; vehicleRepo.save(Vehicle.builder().plateNo(plateNo).type(type).ownerEmail(ownerEmail).build()));&#10;&#10;        List&lt;ParkingSlot&gt; slots = slotRepo.findAndLockFirstFreeSlotByType(type);&#10;        if (slots.isEmpty()) {&#10;            throw new IllegalStateException(&quot;Parking Full for vehicle type: &quot; + type);&#10;        }&#10;        ParkingSlot slot = slots.get(0);&#10;        slot.setStatus(SlotStatus.OCCUPIED);&#10;        slotRepo.save(slot);&#10;&#10;        Ticket ticket = Ticket.builder().vehicle(vehicle).slot(slot).entryTime(LocalDateTime.now()).status(TicketStatus.ACTIVE).build();&#10;        ticketRepo.save(ticket);&#10;        return ticket;&#10;    }&#10;&#10;    @Override&#10;    @Transactional&#10;    public Payment handleExit(Long ticketId) {&#10;        Ticket ticket = ticketRepo.findById(ticketId).orElseThrow(() -&gt; new IllegalArgumentException(&quot;Invalid ticket &quot; + ticketId));&#10;        if (ticket.getStatus() != TicketStatus.ACTIVE) {&#10;            throw new IllegalStateException(&quot;Ticket not active&quot;);&#10;        }&#10;        ticket.setExitTime(LocalDateTime.now());&#10;        long minutes = Duration.between(ticket.getEntryTime(), ticket.getExitTime()).toMinutes();&#10;        double amount = pricingService.calculateAmount(ticket.getVehicle().getType(), minutes);&#10;&#10;        Payment payment = Payment.builder().ticket(ticket).amount(amount).status(PaymentStatus.PENDING).timestamp(LocalDateTime.now()).build();&#10;        paymentRepo.save(payment);&#10;&#10;        boolean paymentSuccess = true;&#10;&#10;        if (paymentSuccess) {&#10;            payment.setStatus(PaymentStatus.SUCCESS);&#10;            ticket.setStatus(TicketStatus.PAID);&#10;            ParkingSlot slot = ticket.getSlot();&#10;            slot.setStatus(SlotStatus.FREE);&#10;            slotRepo.save(slot);&#10;&#10;            ticket.setStatus(TicketStatus.EXITED);&#10;            ticketRepo.save(ticket);&#10;            paymentRepo.save(payment);&#10;        } else {&#10;            payment.setStatus(PaymentStatus.FAILED);&#10;            paymentRepo.save(payment);&#10;            throw new IllegalStateException(&quot;Payment failed; slot not freed.&quot;);&#10;        }&#10;        return payment;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.aaru.parking.service.impl;&#10;&#10;import com.aaru.parking.model.*;&#10;import com.aaru.parking.repository.*;&#10;import com.aaru.parking.service.ParkingService;&#10;import com.aaru.parking.service.PricingService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.time.Duration;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class ParkingServiceImpl implements ParkingService {&#10;&#10;    private final ParkingSlotRepository slotRepo;&#10;    private final VehicleRepository vehicleRepo;&#10;    private final TicketRepository ticketRepo;&#10;    private final PaymentRepository paymentRepo;&#10;    private final PricingService pricingService;&#10;&#10;    @Override&#10;    @Transactional&#10;    public Ticket handleEntry(String plateNo, SlotType type, String ownerEmail) {&#10;        Optional&lt;Ticket&gt; existing = ticketRepo.findByVehicle_PlateNoAndStatus(plateNo, TicketStatus.ACTIVE);&#10;        if (existing.isPresent()) {&#10;            throw new IllegalStateException(&quot;Vehicle already parked (active ticket exists)&quot;);&#10;        }&#10;&#10;        Vehicle vehicle = vehicleRepo.findByPlateNo(plateNo)&#10;                .orElseGet(() -&gt; vehicleRepo.save(Vehicle.builder().plateNo(plateNo).type(type).ownerEmail(ownerEmail).build()));&#10;&#10;        List&lt;ParkingSlot&gt; slots = slotRepo.findAndLockFirstFreeSlotByType(type);&#10;        if (slots.isEmpty()) {&#10;            throw new IllegalStateException(&quot;Parking Full for vehicle type: &quot; + type);&#10;        }&#10;        ParkingSlot slot = slots.get(0);&#10;        slot.setStatus(SlotStatus.OCCUPIED);&#10;        slotRepo.save(slot);&#10;&#10;        Ticket ticket = Ticket.builder().vehicle(vehicle).slot(slot).entryTime(LocalDateTime.now()).status(TicketStatus.ACTIVE).build();&#10;        ticketRepo.save(ticket);&#10;        return ticket;&#10;    }&#10;&#10;    @Override&#10;    @Transactional&#10;    public Payment handleExit(Long ticketId) {&#10;        Ticket ticket = ticketRepo.findById(ticketId).orElseThrow(() -&gt; new IllegalArgumentException(&quot;Invalid ticket &quot; + ticketId));&#10;        if (ticket.getStatus() != TicketStatus.ACTIVE) {&#10;            throw new IllegalStateException(&quot;Ticket not active&quot;);&#10;        }&#10;        ticket.setExitTime(LocalDateTime.now());&#10;        long minutes = Duration.between(ticket.getEntryTime(), ticket.getExitTime()).toMinutes();&#10;        double amount = pricingService.calculateAmount(ticket.getVehicle().getType(), minutes);&#10;&#10;        Payment payment = Payment.builder().ticket(ticket).amount(amount).status(PaymentStatus.PENDING).timestamp(LocalDateTime.now()).build();&#10;        paymentRepo.save(payment);&#10;&#10;        boolean paymentSuccess = true;&#10;&#10;        if (paymentSuccess) {&#10;            payment.setStatus(PaymentStatus.SUCCESS);&#10;            ticket.setStatus(TicketStatus.PAID);&#10;            ParkingSlot slot = ticket.getSlot();&#10;            slot.setStatus(SlotStatus.FREE);&#10;            slotRepo.save(slot);&#10;&#10;            ticket.setStatus(TicketStatus.EXITED);&#10;            ticketRepo.save(ticket);&#10;            paymentRepo.save(payment);&#10;        } else {&#10;            payment.setStatus(PaymentStatus.FAILED);&#10;            paymentRepo.save(payment);&#10;            throw new IllegalStateException(&quot;Payment failed; slot not freed.&quot;);&#10;        }&#10;        return payment;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/parking/service/impl/PricingServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/parking/service/impl/PricingServiceImpl.java" />
              <option name="originalContent" value="package com.example.parking.service.impl;&#10;&#10;import com.example.parking.model.SlotType;&#10;import com.example.parking.service.PricingService;&#10;import org.springframework.stereotype.Service;&#10;&#10;@Service&#10;public class PricingServiceImpl implements PricingService {&#10;&#10;    @Override&#10;    public double calculateAmount(SlotType type, long minutes) {&#10;        if (minutes &lt;= 120) return 0.0;&#10;        double hours = Math.ceil((minutes - 120) / 60.0);&#10;        double ratePerHour = switch(type) {&#10;            case BIKE -&gt; 10.0;&#10;            case CAR -&gt; 30.0;&#10;            case TRUCK -&gt; 50.0;&#10;        };&#10;        return hours * ratePerHour;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.aaru.parking.service.impl;&#10;&#10;import com.aaru.parking.model.SlotType;&#10;import com.aaru.parking.service.PricingService;&#10;import org.springframework.stereotype.Service;&#10;&#10;@Service&#10;public class PricingServiceImpl implements PricingService {&#10;&#10;    @Override&#10;    public double calculateAmount(SlotType type, long minutes) {&#10;        if (minutes &lt;= 120) return 0.0;&#10;        double hours = Math.ceil((minutes - 120) / 60.0);&#10;        double ratePerHour = switch(type) {&#10;            case BIKE -&gt; 10.0;&#10;            case CAR -&gt; 30.0;&#10;            case TRUCK -&gt; 50.0;&#10;        };&#10;        return hours * ratePerHour;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/aaru/parking/controller/ParkingControllerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/aaru/parking/controller/ParkingControllerTest.java" />
              <option name="updatedContent" value="package com.aaru.parking.controller;&#10;&#10;import com.aaru.parking.model.*;&#10;import com.aaru.parking.service.ParkingService;&#10;import com.aaru.parking.service.PaymentService;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;import org.springframework.http.ResponseEntity;&#10;&#10;import java.util.Collections;&#10;import java.util.List;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;class ParkingControllerTest {&#10;    @Mock&#10;    ParkingService parkingService;&#10;    @Mock&#10;    PaymentService paymentService;&#10;    @InjectMocks&#10;    ParkingController controller;&#10;&#10;    public ParkingControllerTest() {&#10;        MockitoAnnotations.openMocks(this);&#10;    }&#10;&#10;    @Test&#10;    void enterParking_shouldReturnTicket() {&#10;        EntryRequest req = new EntryRequest();&#10;        Ticket ticket = Ticket.builder().id(1L).build();&#10;        when(parkingService.parkVehicle(req)).thenReturn(ticket);&#10;        ResponseEntity&lt;Ticket&gt; resp = controller.enterParking(req);&#10;        assertEquals(ticket, resp.getBody());&#10;    }&#10;&#10;    @Test&#10;    void exitParking_shouldReturnPayment() {&#10;        Payment payment = Payment.builder().id(1L).build();&#10;        when(parkingService.processExit(1L)).thenReturn(payment);&#10;        ResponseEntity&lt;Payment&gt; resp = controller.exitParking(1L);&#10;        assertEquals(payment, resp.getBody());&#10;    }&#10;&#10;    @Test&#10;    void getAvailableSlots_shouldReturnSlots() {&#10;        List&lt;ParkingSlot&gt; slots = Collections.singletonList(ParkingSlot.builder().id(1L).build());&#10;        when(parkingService.getAvailableSlots(SlotType.CAR)).thenReturn(slots);&#10;        ResponseEntity&lt;List&lt;ParkingSlot&gt;&gt; resp = controller.getAvailableSlots(SlotType.CAR);&#10;        assertEquals(slots, resp.getBody());&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/example/parking/controller/AdminControllerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/example/parking/controller/AdminControllerTest.java" />
              <option name="originalContent" value="package com.example.parking.controller;&#10;&#10;import com.example.parking.model.*;&#10;import com.example.parking.repository.ParkingSlotRepository;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;import org.springframework.http.ResponseEntity;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;public class AdminControllerTest {&#10;    @Mock&#10;    private ParkingSlotRepository slotRepo;&#10;    @InjectMocks&#10;    private AdminController adminController;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        MockitoAnnotations.openMocks(this);&#10;    }&#10;&#10;    @Test&#10;    void addSlot_shouldSaveSlotAndReturnOk() {&#10;        AddSlotRequest req = new AddSlotRequest();&#10;        req.setFloor(1);&#10;        req.setType(SlotType.CAR);&#10;        ParkingSlot slot = ParkingSlot.builder().floor(1).type(SlotType.CAR).status(SlotStatus.FREE).build();&#10;        when(slotRepo.save(any())).thenReturn(slot);&#10;        ResponseEntity&lt;?&gt; response = adminController.addSlot(req);&#10;        assertEquals(200, response.getStatusCodeValue());&#10;        assertNotNull(response.getBody());&#10;        assertEquals(slot.getType(), ((ParkingSlot) response.getBody()).getType());&#10;        assertEquals(slot.getFloor(), ((ParkingSlot) response.getBody()).getFloor());&#10;        assertEquals(slot.getStatus(), ((ParkingSlot) response.getBody()).getStatus());&#10;        //assertEquals(slot, response.getBody());&#10;    }&#10;&#10;    @Test&#10;    void removeSlot_shouldDeleteSlotAndReturnNoContent() {&#10;        doNothing().when(slotRepo).deleteById(anyLong());&#10;        ResponseEntity&lt;?&gt; response = adminController.removeSlot(1L);&#10;        assertEquals(204, response.getStatusCodeValue());&#10;        assertNull(response.getBody());&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.aaru.parking.controller;&#10;&#10;import com.aaru.parking.model.*;&#10;import com.aaru.parking.repository.ParkingSlotRepository;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;import org.springframework.http.ResponseEntity;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;public class AdminControllerTest {&#10;    @Mock&#10;    private ParkingSlotRepository slotRepo;&#10;    @InjectMocks&#10;    private AdminController adminController;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        MockitoAnnotations.openMocks(this);&#10;    }&#10;&#10;    @Test&#10;    void addSlot_shouldSaveSlotAndReturnOk() {&#10;        AddSlotRequest req = new AddSlotRequest();&#10;        req.setFloor(1);&#10;        req.setType(SlotType.CAR);&#10;        ParkingSlot slot = ParkingSlot.builder().floor(1).type(SlotType.CAR).status(SlotStatus.FREE).build();&#10;        when(slotRepo.save(any())).thenReturn(slot);&#10;        ResponseEntity&lt;?&gt; response = adminController.addSlot(req);&#10;        assertEquals(200, response.getStatusCodeValue());&#10;        assertNotNull(response.getBody());&#10;        assertEquals(slot.getType(), ((ParkingSlot) response.getBody()).getType());&#10;        assertEquals(slot.getFloor(), ((ParkingSlot) response.getBody()).getFloor());&#10;        assertEquals(slot.getStatus(), ((ParkingSlot) response.getBody()).getStatus());&#10;        //assertEquals(slot, response.getBody());&#10;    }&#10;&#10;    @Test&#10;    void removeSlot_shouldDeleteSlotAndReturnNoContent() {&#10;        doNothing().when(slotRepo).deleteById(anyLong());&#10;        ResponseEntity&lt;?&gt; response = adminController.removeSlot(1L);&#10;        assertEquals(204, response.getStatusCodeValue());&#10;        assertNull(response.getBody());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>